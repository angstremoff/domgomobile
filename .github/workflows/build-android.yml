name: Сборка Android

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Клонируем репозиторий
      - name: Скачиваем код
        uses: actions/checkout@v3
      
      # 2. Настраиваем Node.js
      - name: Настройка Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # 3. Устанавливаем зависимости
      - name: Установка зависимостей
        run: npm ci --legacy-peer-deps

      # 4. Настраиваем Java
      - name: Настройка Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 5. Создаем keystore для подписи APK
      - name: Настройка подписи APK
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          echo "MYAPP_UPLOAD_STORE_FILE=upload-keystore.jks" >> android/gradle.properties
          echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> android/gradle.properties
          echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> android/gradle.properties
          echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> android/gradle.properties

      # 6. Собираем APK
      - name: Сборка APK
        run: |
          cd android
          chmod +x gradlew
          ./gradlew assembleRelease --no-daemon
          ls -la app/build/outputs/apk/release/
          
      # 7. Сохраняем APK для публикации
      - name: Подготовка APK для публикации
        run: |
          mkdir -p release
          cp android/app/build/outputs/apk/release/app-release.apk release/DomGo.apk
          echo "APK успешно собран!"
          echo "Размер APK: $(du -h release/DomGo.apk | cut -f1)"
          echo "MD5: $(md5sum release/DomGo.apk | cut -d' ' -f1)"

      # 8. Публикуем релиз на GitHub
      - name: Создание релиза
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Получаем текущий тег/версию
            const tagName = process.env.GITHUB_REF.replace('refs/tags/', '');
            
            // Создаем релиз
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `DomGo ${tagName}`,
              body: `Версия ${tagName}\nДата: ${new Date().toLocaleDateString()}`
            });
            
            // Загружаем APK как ассет релиза
            const apkData = fs.readFileSync('release/DomGo.apk');
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: 'DomGo.apk',
              data: apkData
            });
            
            console.log(`Релиз ${tagName} успешно создан и APK загружен!`);
            console.log(`URL релиза: ${release.data.html_url}`);
            console.log(`URL для скачивания APK: ${release.data.html_url}/assets/DomGo.apk`);
